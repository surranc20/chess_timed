from ..colors import Colors


class Piece:
    """Abstract class that all chess pieces will extend. Keeps track of a
    pieces color, unicode value, and can test to see if a move is valid."""

    def __init__(self, color):
        """Create a piece with a certain color.

        :param color: The color of a chess piece
        :type color: Color
        """
        self.color = color
        self.white_unicode_val = None
        self.black_unicode_val = None
        self.moved = False

    def __repr__(self):
        """Returns the unicode representation of a piece

        :returns: Unicode representation of a piece
        :rtype: String
        """
        if self.color == Colors.WHITE:
            return self.white_unicode_val
        else:
            return self.black_unicode_val

    def move_is_valid(self, board, old_x, old_y, new_x, new_y):
        """Checks to see if a certain move is valid.

        :param board: The chess board
        :type board: Board
        :param old_x: The starting x coord of the piece
        :type old_x: Int
        :param old_y: The starting y coord of the piece
        :type old_y: Int
        :param new_x: The target x coord of the piece
        :type new_x: Int
        :param new_y: The target y coord of the piece
        :type new_y: Int
        :returns: Whether or not a certain move is a valid move
        :rtype: Boolean
        """
        possible_moves = \
            self.generate_possible_moves(board, old_x, old_y)

        if (new_x, new_y) in possible_moves:
            return True
        else:
            return False

    def generate_possible_moves(self, board, old_x, old_y):
        """Generates all possible moves that a piece can make. It does not
        check to see if the move will leave a player checked. So not every
        move generated by this function is actually a valid move.
        :param board: The chess board
        :type board: Board
        :param old_x: The x location the piece is starting at
        :type old_x: Int
        :param old_y: The y location the piece is starting at
        :type old_y: Int
        :returns: List of all possible moves
        :rtype: List
        """
        return []
