from .piece import Piece
from ..colors import Colors


class Pawn(Piece):
    def __init__(self, color):
        """Create a Pawn with a certain color.
        :param color: The color of a chess piece
        :type color: Color
        """
        super().__init__(color)
        self.white_unicode_val = '\u2659'
        self.black_unicode_val = '\u265F'
        self.moved = False

    def generate_possible_moves(self, board, old_x, old_y):
        """Generates all possible moves that a pawn can make. It does not
        check to see if the move will leave a player checked. So not every
        move generated by this function is actually a valid move.
        :param board: The chess board
        :type board: Board
        :param old_x: The x location the piece is starting at
        :type old_x: Int
        :param old_y: The y location the piece is starting at
        :type old_y: Int
        :returns: List of all possible moves
        :rtype: List
        """
        # Pawns are directional so we need to know which direction the pawn is
        # allowed to go in.
        delta = 1 if self.color == Colors.WHITE else - 1

        # Pawns can move two squares on first move.
        distance = 1 if self.moved else 2

        possible_moves = set()

        # This generates non capturing moves.
        for y in range(1, distance + 1):
            pos_y = old_y + y * delta

            if not board.move_on_board(old_x, pos_y):
                break

            if board.board[pos_y][old_x].piece is None:
                if y == 1:
                    possible_moves.add((old_x, pos_y))
            else:
                break

        # This generates caputuring moves.
        for x in [-1, 1]:
            pos_x = old_x + x
            pos_y = old_y + delta
            if not board.move_on_board(pos_x, pos_y):
                break

            pos_piece = board.board[pos_y][pos_x].piece
            if pos_piece is not None and pos_piece.color != self.color:
                possible_moves.add((pos_x, pos_y))

        return possible_moves
